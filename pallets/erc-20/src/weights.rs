
//! Autogenerated weights for `pallet_erc_20`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nixos`, CPU: `AMD Ryzen 7 6800HS with Radeon Graphics`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_erc_20
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/erc-20/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_erc_20`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: `Erc20::Balances` (r:2 w:2)
	/// Proof: `Erc20::Balances` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `6036`
		// Minimum execution time: 33_766_000 picoseconds.
		Weight::from_parts(54_849_000, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Erc20::Allowances` (r:1 w:1)
	/// Proof: `Erc20::Allowances` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Erc20::Balances` (r:2 w:2)
	/// Proof: `Erc20::Balances` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `357`
		//  Estimated: `6036`
		// Minimum execution time: 47_240_000 picoseconds.
		Weight::from_parts(76_846_000, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Erc20::Allowances` (r:0 w:1)
	/// Proof: `Erc20::Allowances` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_950_000 picoseconds.
		Weight::from_parts(22_588_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Erc20::TotalSupply` (r:1 w:1)
	/// Proof: `Erc20::TotalSupply` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Erc20::Balances` (r:1 w:1)
	/// Proof: `Erc20::Balances` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `233`
		//  Estimated: `3513`
		// Minimum execution time: 20_293_000 picoseconds.
		Weight::from_parts(21_188_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Erc20::Balances` (r:1 w:1)
	/// Proof: `Erc20::Balances` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Erc20::TotalSupply` (r:1 w:1)
	/// Proof: `Erc20::TotalSupply` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `270`
		//  Estimated: `3513`
		// Minimum execution time: 23_844_000 picoseconds.
		Weight::from_parts(31_605_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
